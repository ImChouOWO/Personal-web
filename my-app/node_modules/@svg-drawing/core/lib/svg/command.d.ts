import type { CommandClass, CommandType, OtherCommandType, PointObject, PointClass, AbsoluteCommandType, RelativeCommandType } from '../types';
/** @deprecated */
export declare class OtherCommand<T extends OtherCommandType> implements CommandClass<OtherCommandType> {
    type: T;
    values: number[];
    static Types: {
        /**
         * Horizontal
         *
         * `H 10`
         */
        readonly H: "H";
        /**
         * Horizontal relative
         *
         * `h 10`
         */
        readonly h: "h";
        /**
         * Vertical
         *
         * V 10
         */
        readonly V: "V";
        /**
         * Vertical relative
         *
         * `v 10`
         */
        readonly v: "v";
        /**
         * Arc curve
         *
         * `A 6 4 10 0 1 14 10`
         */
        readonly A: "A";
        /**
         * Arc curve relative
         *
         * `a 6 4 10 0 1 14 10`
         */
        readonly a: "a";
    };
    constructor(type: T, values?: number[]);
    set points(p: PointClass[]);
    get points(): PointClass[];
    get point(): undefined;
    toString(): string;
    scale(r: number): OtherCommand<T>;
    scaleX(r: number): OtherCommand<T>;
    scaleY(r: number): OtherCommand<T>;
    clone(): OtherCommand<T>;
    translate(p: PointObject): this;
    static validTypes(t: any): t is OtherCommandType;
}
/**
 * Move relative
 *
 * `m 0 0`
 */
export declare class RelativeMove implements CommandClass<'m'> {
    readonly type = "m";
    readonly relative = false;
    points: [PointClass];
    constructor(point: PointClass);
    get values(): number[];
    get point(): PointClass;
    toString(): string;
    translate(p: PointObject): RelativeMove;
    scale(r: number): RelativeMove;
    scaleX(r: number): RelativeMove;
    scaleY(r: number): RelativeMove;
    clone(): RelativeMove;
}
/**
 * Move
 *
 * `M 0 0`
 */
export declare class Move implements CommandClass<'M'> {
    readonly type = "M";
    points: [PointClass];
    constructor(point: PointClass);
    get values(): number[];
    get point(): PointClass;
    toString(): string;
    translate(p: PointObject): Move;
    scale(r: number): Move;
    scaleX(r: number): Move;
    scaleY(r: number): Move;
    clone(): Move;
}
/**
 * Line relative
 *
 * `l 0 0`
 */
export declare class RelativeLine implements CommandClass<'l'> {
    readonly type = "l";
    points: [PointClass];
    constructor(point: PointClass);
    get values(): number[];
    get point(): PointClass;
    toString(): string;
    translate(p: PointObject): RelativeLine;
    scale(r: number): RelativeLine;
    scaleX(r: number): RelativeLine;
    scaleY(r: number): RelativeLine;
    clone(): RelativeLine;
}
/**
 * Line
 *
 * `L 0 0`
 */
export declare class Line implements CommandClass<'L'> {
    readonly type = "L";
    points: [PointClass];
    constructor(point: PointClass);
    get values(): number[];
    get point(): PointClass;
    toString(): string;
    translate(p: PointObject): Line;
    scale(r: number): Line;
    scaleX(r: number): Line;
    scaleY(r: number): Line;
    clone(): Line;
}
/**
 * Cubic bezier curve relative
 *
 * `c 1 1 2 2 3 3`
 */
export declare class RelativeCurve implements CommandClass<'c'> {
    points: [PointClass, PointClass, PointClass];
    readonly type = "c";
    constructor(points: [PointClass, PointClass, PointClass]);
    get values(): number[];
    get point(): PointClass;
    toString(): string;
    translate(p: PointObject): RelativeCurve;
    scale(r: number): RelativeCurve;
    scaleX(r: number): RelativeCurve;
    scaleY(r: number): RelativeCurve;
    clone(): RelativeCurve;
}
/**
 * Cubic bezier curve
 *
 * `C 1 1 2 2 3 3`
 */
export declare class Curve implements CommandClass<'C'> {
    points: [PointClass, PointClass, PointClass];
    readonly type = "C";
    constructor(points: [PointClass, PointClass, PointClass]);
    get values(): [number, number, number, number, number, number];
    get point(): PointClass;
    toString(): string;
    translate(p: PointObject): Curve;
    scale(r: number): Curve;
    scaleX(r: number): Curve;
    scaleY(r: number): Curve;
    clone(): Curve;
}
/**
 * Shortcut curve
 *
 * `S 10 60 10 30`
 */
export declare class ShortcutCurve implements CommandClass<'S'> {
    points: [PointClass, PointClass];
    readonly type = "S";
    constructor(points: [PointClass, PointClass]);
    get values(): [number, number, number, number];
    get point(): PointClass;
    toString(): string;
    translate(p: PointObject): ShortcutCurve;
    scale(r: number): ShortcutCurve;
    scaleX(r: number): ShortcutCurve;
    scaleY(r: number): ShortcutCurve;
    clone(): ShortcutCurve;
}
/**
 * Shortcut curve relative
 *
 * `s 10 60 10 30`
 */
export declare class RelativeShortcutCurve implements CommandClass<'s'> {
    points: [PointClass, PointClass];
    readonly type = "s";
    constructor(points: [PointClass, PointClass]);
    get values(): [number, number, number, number];
    get point(): PointClass;
    toString(): string;
    translate(p: PointObject): RelativeShortcutCurve;
    scale(r: number): RelativeShortcutCurve;
    scaleX(r: number): RelativeShortcutCurve;
    scaleY(r: number): RelativeShortcutCurve;
    clone(): RelativeShortcutCurve;
}
/**
 * Quadratic curve
 *
 * Q 10 60 10 30
 */
export declare class QuadraticCurve implements CommandClass<'Q'> {
    points: [PointClass, PointClass];
    readonly type = "Q";
    constructor(points: [PointClass, PointClass]);
    get values(): [number, number, number, number];
    get point(): PointClass;
    toString(): string;
    translate(p: PointObject): QuadraticCurve;
    scale(r: number): QuadraticCurve;
    scaleX(r: number): QuadraticCurve;
    scaleY(r: number): QuadraticCurve;
    clone(): QuadraticCurve;
}
/**
 * Quadratic curve relative
 *
 * `q 10 60 10 30`
 */
export declare class RelativeQuadraticCurve implements CommandClass<'q'> {
    points: [PointClass, PointClass];
    readonly type = "q";
    constructor(points: [PointClass, PointClass]);
    get values(): [number, number, number, number];
    get point(): PointClass;
    toString(): string;
    translate(p: PointObject): RelativeQuadraticCurve;
    scale(r: number): RelativeQuadraticCurve;
    scaleX(r: number): RelativeQuadraticCurve;
    scaleY(r: number): RelativeQuadraticCurve;
    clone(): RelativeQuadraticCurve;
}
/**
 * Close
 *
 * 'z'
 */
export declare class Close implements CommandClass<'z'> {
    readonly type = "z";
    get values(): [];
    get points(): [];
    get point(): undefined;
    toString(): string;
    translate(_p: PointObject): Close;
    scale(_r: number): Close;
    scaleX(r: number): Close;
    scaleY(r: number): Close;
    clone(): Close;
}
export declare const createCommand: (type: CommandType, values?: number[]) => CommandClass;
export declare const isAbsoluteCommand: (command: CommandClass) => command is CommandClass<"M" | "L" | "C" | "Q" | "S">;
export declare const isRelativeCommand: (command: CommandClass) => command is CommandClass<RelativeCommandType>;
export declare const isCurveCommand: (command: CommandClass) => command is CommandClass<"c" | "C">;
export declare const isOtherCommand: (command: CommandClass) => command is CommandClass<OtherCommandType>;
export declare const toRelativeCommand: (command: CommandClass<AbsoluteCommandType>, basePoint: PointObject) => CommandClass<RelativeCommandType>;
export declare const toAbsoluteCommand: (command: CommandClass<RelativeCommandType>, basePoint: PointObject) => CommandClass<AbsoluteCommandType>;
export declare const toRelativeCommands: (commands: CommandClass[]) => CommandClass[];
export declare const toAbsoluteCommands: (commands: CommandClass[]) => CommandClass[];
