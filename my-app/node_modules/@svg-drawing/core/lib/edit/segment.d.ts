import type { PointObject, CommandClass } from '../types';
declare type BezierCurvePoint = [PointObject, PointObject, PointObject, PointObject];
/**
 * A cubic Bezier curve is defined by four points. Two are endpoints. (x0,y0) is
 * the origin endpoint. (x3,y3) is the destination endpoint. The points (x1,y1)
 * and (x2,y2) are control points.
 *
 * Two equations define the points on the curve. Both are evaluated for an
 * arbitrary number of values of t between 0 and 1. One equation yields values
 * for x, the other yields values for y. As increasing values for t are supplied
 * to the equations, the point defined by x(t),y(t) moves from the origin to the
 * destination. This is how the equations are defined in Adobe's PostScript references.
 *
 * X(t) = A(x) * pow(t, 3) + B(x) * pow(t, 2) + C(x) * t + x0
 *
 * Y(t) = A(y) * pow(t, 3) + B(y) * pow(t, 2) + c(y) * t + y0
 *
 * This method of definition can be reverse-engineered so that it'll give up the
 * coefficient values based on the points described above:
 *
 * C(x) = 3 (x1 - x0)
 *
 * B(x) = 3 (x2 - x1) - cx
 *
 * A(x) = x3 - x0 - cx - bx
 *
 * C(y) = 3 (y1 - y0)
 *
 * B(y) = 3 (y2 - y1) - cy
 *
 * A(y) = y3 - y0 - cy - by
 *
 * {@link https://www.moshplant.com/direct-or/bezier/math.html}
 */
export declare const calculateCoefficient: ([p0, p1, p2, p3]: BezierCurvePoint) => {
    a: PointObject;
    b: PointObject;
    c: PointObject;
};
/** @todo Compatible for Quadratic and shortcut curve. */
export declare const segmentPoint: (bezierCurve: BezierCurvePoint, range?: number) => PointObject[];
/** @todo Compatible for Quadratic and shortcut curve */
export declare const segmentPointsFromCommand: (command: CommandClass, { base, range, }: {
    base?: Readonly<{
        x: number;
        y: number;
    }> | undefined;
    range?: number | undefined;
}) => PointObject[];
export {};
