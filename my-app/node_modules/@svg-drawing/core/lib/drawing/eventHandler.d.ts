import type { DrawingClass } from '..';
import type { DrawEventHandler, ClearListener, EventPoint } from '../types';
export declare abstract class BaseHandler implements DrawEventHandler {
    protected drawing: DrawingClass;
    protected el?: HTMLElement | undefined;
    /** Remove EventList */
    private _clearEventList;
    /** Offset coordinates */
    private _offsetPosition;
    constructor(drawing: DrawingClass, el?: HTMLElement | undefined);
    get isActive(): boolean;
    off(): void;
    on(): void;
    setElement(el: HTMLElement): void;
    setDrawing(drawing: DrawingClass): void;
    getPointObjectFromDrawEvent(ev: MouseEvent | TouchEvent | PointerEvent): EventPoint;
    protected abstract setupListener(): Array<ClearListener>;
}
export declare class PencilHandler extends BaseHandler {
    private _drawMoveThrottle;
    private delay;
    /** AddEventListener Options */
    private listenerOption;
    constructor(drawing: DrawingClass, el?: HTMLElement);
    changeDelay(delay: number): void;
    setDrawing(drawing: DrawingClass): void;
    protected setupListener(): Array<ClearListener>;
    private _handleStart;
    private _handleEnd;
    private _handleMove;
    private _setupDrawListener;
}
export declare class PenHandler extends BaseHandler {
    private _editing;
    constructor(drawing: DrawingClass, el?: HTMLElement);
    protected setupListener(): Array<ClearListener>;
    private _handleProt;
    private _isContainElement;
    private _setupCancelListener;
    private _setupDrawListener;
}
