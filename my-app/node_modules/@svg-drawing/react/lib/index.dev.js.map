{"version":3,"file":"index.dev.js","sources":["../src/components/BackgroundRect.tsx","../src/components/Svg.tsx","../src/components/Paths.tsx","../src/components/Edit.tsx","../src/components/Animate.tsx","../src/hooks/useRenderInterval.ts","../src/hooks/useDraw.ts","../src/hooks/useDrawEventHandler.ts","../src/hooks/useDrawFactory.ts","../src/hooks/usePressedKey.ts","../src/hooks/useEdit.ts","../src/hooks/useSvg.ts","../src/hooks/useKeyboardBind.ts","../src/hooks/useParseFile.ts","../src/hooks/useAnimation.ts","../src/hooks/useResize.ts"],"sourcesContent":["import React from 'react'\nimport type { SvgObject } from '@svg-drawing/core'\n\nexport const BackgroundRect = ({ fill }: { fill: SvgObject['background'] }) => (\n  <rect\n    style={{ pointerEvents: 'none' }}\n    width=\"100%\"\n    height=\"100%\"\n    fill={fill}\n  />\n)\n","import React, { useRef, useCallback } from 'react'\nimport { BackgroundRect } from './BackgroundRect'\nimport type { SvgProps } from '../types'\n\nexport const Svg = ({\n  onSelectSvg,\n  background,\n  children,\n  ...rest\n}: SvgProps) => {\n  const svgRef = useRef<SVGSVGElement>(null)\n\n  const onSelect = useCallback(\n    (ev: React.MouseEvent<SVGSVGElement> | React.TouchEvent<SVGSVGElement>) => {\n      if (!svgRef.current) return\n      if (!svgRef.current.isSameNode(ev.target as Node)) return\n\n      onSelectSvg?.()\n    },\n    [onSelectSvg]\n  )\n\n  return (\n    <svg ref={svgRef} onMouseDown={onSelect} onTouchStart={onSelect} {...rest}>\n      {background && <BackgroundRect fill={background} />}\n      {children}\n    </svg>\n  )\n}\n","import React from 'react'\nimport type { PathsProps } from '..'\n\nexport const Paths = ({ paths }: PathsProps) => (\n  <>\n    {paths.map(({ type, attributes }, i) => (\n      <path key={i} {...attributes} />\n    ))}\n  </>\n)\n","import React, { useCallback } from 'react'\nimport type { EditPathsProps, EditBoundingBoxProps } from '../types'\nimport type { PointObject, FixedType, SelectIndex } from '@svg-drawing/core'\n\nexport const EditPaths = ({\n  paths,\n  editPaths,\n  boundingBox,\n  onTranslateStart,\n  onResizeStart,\n  onSelectPaths,\n}: EditPathsProps) => {\n  const handleMoveStartPoint = useCallback(\n    (selectIndex: Required<SelectIndex>) =>\n      (\n        ev:\n          | React.MouseEvent<SVGRectElement | SVGPathElement | SVGCircleElement>\n          | React.TouchEvent<SVGRectElement | SVGPathElement | SVGCircleElement>\n      ) => {\n        onSelectPaths(selectIndex)\n        onTranslateStart(getPointFromEvent(ev))\n      },\n    [onSelectPaths, onTranslateStart]\n  )\n\n  const handleMoveStartPath = useCallback(\n    (path: string) =>\n      (\n        ev:\n          | React.MouseEvent<SVGRectElement | SVGPathElement | SVGCircleElement>\n          | React.TouchEvent<SVGRectElement | SVGPathElement | SVGCircleElement>\n      ) => {\n        onSelectPaths({ path })\n        onTranslateStart(getPointFromEvent(ev))\n      },\n    [onSelectPaths, onTranslateStart]\n  )\n\n  return (\n    <>\n      {paths.map(({ key, attributes }) => (\n        <path\n          key={key}\n          {...attributes}\n          onMouseDown={handleMoveStartPath(key)}\n          onTouchStart={handleMoveStartPath(key)}\n        />\n      ))}\n      {boundingBox && (\n        <EditBoundingBox\n          {...boundingBox}\n          onTranslateStart={onTranslateStart}\n          onResizeStart={onResizeStart}\n        />\n      )}\n      {editPaths &&\n        Object.entries(editPaths).map(([, { key, vertex, d }]) => (\n          <g key={key}>\n            <path\n              d={d}\n              strokeWidth={EDIT_CONFIG.line}\n              stroke={EDIT_CONFIG.color.main}\n              fill={EDIT_CONFIG.fill.boundingBox}\n              onMouseDown={handleMoveStartPath(key)}\n              onTouchStart={handleMoveStartPath(key)}\n            />\n            {vertex.map(({ points, d }, commandIndex) => (\n              <g key={commandIndex}>\n                <path\n                  d={d}\n                  strokeWidth={EDIT_CONFIG.line}\n                  stroke={EDIT_CONFIG.color.main}\n                  fill={EDIT_CONFIG.fill.default}\n                />\n                {points.map((po, k) => (\n                  <circle\n                    key={k}\n                    cx={po.value.x}\n                    cy={po.value.y}\n                    onMouseDown={handleMoveStartPoint(po.index)}\n                    onTouchStart={handleMoveStartPoint(po.index)}\n                    r={EDIT_CONFIG.point}\n                    style={{\n                      fill: po.selected\n                        ? EDIT_CONFIG.color.selected\n                        : EDIT_CONFIG.color.sub,\n                    }}\n                  />\n                ))}\n              </g>\n            ))}\n          </g>\n        ))}\n    </>\n  )\n}\n\nexport const EditBoundingBox = ({\n  x,\n  y,\n  width,\n  height,\n  vertex,\n  selected,\n  onTranslateStart,\n  onResizeStart,\n}: EditBoundingBoxProps) => {\n  const handleMovePathsStart = useCallback(\n    (\n      ev:\n        | React.MouseEvent<SVGRectElement | SVGPathElement | SVGCircleElement>\n        | React.TouchEvent<SVGRectElement | SVGPathElement | SVGCircleElement>\n    ) => {\n      onTranslateStart(getPointFromEvent(ev))\n    },\n    [onTranslateStart]\n  )\n\n  const handleResizeStart = useCallback(\n    (fixedType: FixedType) =>\n      (\n        ev:\n          | React.MouseEvent<SVGRectElement | SVGPathElement | SVGCircleElement>\n          | React.TouchEvent<SVGRectElement | SVGPathElement | SVGCircleElement>\n      ) => {\n        onResizeStart({\n          fixedType,\n          point: getPointFromEvent(ev),\n        })\n      },\n    [onResizeStart]\n  )\n\n  return (\n    <>\n      <rect\n        x={x}\n        y={y}\n        width={width}\n        height={height}\n        stroke={EDIT_CONFIG.color.main}\n        fill={\n          selected ? EDIT_CONFIG.fill.selected : EDIT_CONFIG.fill.boundingBox\n        }\n        onMouseDown={handleMovePathsStart}\n        onTouchStart={handleMovePathsStart}\n      />\n      {Object.entries(vertex).map(([key, point]) => (\n        <circle\n          key={key}\n          cx={point.x}\n          cy={point.y}\n          r={EDIT_CONFIG.point}\n          stroke={EDIT_CONFIG.color.main}\n          fill={\n            selected ? EDIT_CONFIG.fill.selected : EDIT_CONFIG.fill.boundingBox\n          }\n          onMouseDown={handleResizeStart(key as FixedType)}\n          onTouchStart={handleResizeStart(key as FixedType)}\n        />\n      ))}\n    </>\n  )\n}\n\nconst EDIT_CONFIG = {\n  line: 1,\n  point: 3,\n  color: {\n    main: '#09f',\n    sub: '#f90',\n    selected: '#f00',\n  },\n  fill: {\n    default: 'none',\n    boundingBox: 'rgba(0,0,0,0)',\n    selected: 'rgba(0,0,0,0.1)',\n  },\n} as const\n\nconst getPointFromEvent = (\n  ev: React.MouseEvent<any> | React.TouchEvent<any>\n): PointObject => {\n  if ('touches' in ev) {\n    const touche = ev.touches[0]\n    return {\n      x: touche.clientX,\n      y: touche.clientY,\n    }\n  }\n  return {\n    x: ev.clientX,\n    y: ev.clientY,\n  }\n}\n","import React from 'react'\nimport type { AnimatePathsProps } from '../types'\n\nexport const AnimatePaths = ({ paths, animatePaths }: AnimatePathsProps) => (\n  <>\n    {paths.map(({ key, attributes }, i) => {\n      const animates = animatePaths?.[key] ?? []\n      return (\n        <path key={i} {...attributes}>\n          {animates.map(({ type, attributes: animAttrs }, i) => (\n            <animate key={i} {...animAttrs} />\n          ))}\n        </path>\n      )\n    })}\n  </>\n)\n","import { useCallback, useRef, useEffect } from 'react'\n\nconst RENDER_INTERVAL = 30\n\ntype UpdateCallback = () => void\n\nexport const useRenderInterval = (\n  ms: number | undefined = RENDER_INTERVAL\n): ((update: UpdateCallback) => void) => {\n  const updateCallback = useRef<null | (() => void)>(null)\n\n  const render = useCallback((update: UpdateCallback) => {\n    updateCallback.current = () => {\n      updateCallback.current = null\n      update()\n    }\n  }, [])\n\n  useEffect(() => {\n    const stopId = setInterval(() => {\n      if (!updateCallback.current) return\n\n      updateCallback.current()\n    }, ms)\n\n    return () => clearInterval(stopId)\n  }, [ms, render])\n\n  return render\n}\n","import { Drawing } from '@svg-drawing/core'\nimport { useCallback, useMemo } from 'react'\nimport { useRenderInterval } from './useRenderInterval'\nimport type { UseDraw } from '../types'\n\n/**\n * ### Basic usage.\n *\n * ```ts\n * import { PencilHandler } from '@svg-drawing/core'\n * import {\n *   Svg,\n *   useDrawFactory,\n *   useDrawEventHandler,\n * } from '@svg-drawing/react'\n *\n * const DrawArea = () => {\n *   const svg = useSvg({ width: 500, height: 500 })\n *   const [svgObject, setSvgObject] = useState(svg.toJson())\n *\n *   const factory = useDrawFactory(\n *     { stroke: '#000', fill: 'none' },\n *     { curve: true, close: false }\n *   )\n *\n *   const draw = useDraw({\n *     svg,\n *     factory,\n *     onChangeSvg: setSvgObject,\n *   })\n *\n *   const ref = useRef(null)\n *   const handler = usePencilHandler(ref, draw, true)\n *\n *   return (\n *     <div ref={ref}>\n *       <Svg {...svgObject} />\n *     </div>\n *   )\n * }\n * ```\n */\nexport const useDraw: UseDraw = ({ factory, svg, onChangeSvg }) => {\n  const render = useRenderInterval()\n\n  const update = useCallback(() => {\n    render(() => onChangeSvg(svg.toJson()))\n  }, [render, onChangeSvg, svg])\n\n  const draw = useMemo(\n    () => new Drawing(svg, factory, update),\n    [svg, factory, update]\n  )\n\n  const clear = useCallback(() => {\n    const paths = svg.paths\n    svg.paths = []\n    update()\n    return paths\n  }, [svg, update])\n\n  const undo = useCallback(() => {\n    const path = svg.paths.pop()\n    update()\n    return path\n  }, [svg.paths, update])\n\n  return {\n    draw,\n    update,\n    clear,\n    undo,\n  }\n}\n","import { PencilHandler, PenHandler } from '@svg-drawing/core'\nimport { useCallback, useEffect, useMemo } from 'react'\nimport type { UseDrawEventHandler } from '../types'\nimport type { DrawEventHandler, DrawingClass } from '@svg-drawing/core'\nimport type { RefObject } from 'react'\n\n/**\n * @example <caption>useDrawEventHandler</caption>\n *\n * ```ts\n * const ref = useRef(null)\n * const handler = useSetupHandler(setup, drawing)\n *\n * UseDrawEventHandler({ ref, handler })\n * ```\n */\nexport const useDrawEventHandler = <E extends HTMLElement = HTMLElement>({\n  ref,\n  handler,\n  active = true,\n}: {\n  ref: RefObject<E>\n  handler: DrawEventHandler\n  active?: boolean\n}) => {\n  useEffect(() => {\n    const cleanup = () => handler.off()\n\n    // Fallback\n    if (!ref.current) {\n      return cleanup\n    }\n\n    // Setup\n    const el = ref.current\n    handler.setElement(el)\n    if (active) handler.on()\n\n    return cleanup\n  }, [active, handler, ref])\n}\n\n/**\n * @example\n *\n * ```ts\n * import { usePencilHandler } from '@svg-drawing/react'\n *\n * const draw = useDraw({...}) const ref = uesRef<HTMLElement>(null)\n *\n * usePencilHandler(ref, draw)\n * ```\n *\n * @example <caption>Switch active status</caption>\n *\n * ```ts\n * import { usePencilHandler } from '@svg-drawing/react'\n *\n * const draw = useDraw(opts) const ref = uesRef<HTMLElement>(null)\n * const [active, setActive] = useState(true)\n *\n * usePencilHandler(ref, draw, active)\n * ```\n */\nexport const usePencilHandler: UseDrawEventHandler = (ref, drawing, active) => {\n  const handler = useMemo(() => new PencilHandler(drawing), []) // eslint-disable-line react-hooks/exhaustive-deps\n\n  useDrawEventHandler({ ref, handler, active })\n}\n\n/**\n * @example\n *\n * ```ts\n * import { usePenHandler } from '@svg-drawing/react'\n *\n * const draw = useDraw({...}) const ref = uesRef<HTMLElement>(null)\n *\n * usePenHandler(ref, draw)\n * ```\n *\n * @example <caption>Switch active status</caption>\n *\n * ```ts\n * import { usePenHandler } from '@svg-drawing/react'\n *\n * const draw = useDraw(opts)\n * const ref = useRef(null)\n * const [active, setActive] = useState(true)\n *\n * usePenHandler(ref, draw, active)\n * ```\n */\nexport const usePenHandler: UseDrawEventHandler = (ref, drawing, active) => {\n  const handler = useMemo(() => new PenHandler(drawing), []) // eslint-disable-line react-hooks/exhaustive-deps\n\n  useDrawEventHandler({ ref, handler: handler, active })\n}\n","import { BasicDrawFactory } from '@svg-drawing/core'\nimport { useMemo } from 'react'\nimport type { DrawFactory, PathAttributes } from '@svg-drawing/core'\n\nexport const useDrawFactory = (\n  pathAttrs: PathAttributes,\n  {\n    curve,\n    close,\n  }: {\n    curve: boolean\n    close: boolean\n  }\n): DrawFactory =>\n  useMemo<DrawFactory>(\n    () => new BasicDrawFactory(pathAttrs, { curve, close }),\n    [close, curve, pathAttrs]\n  )\n","import { useEffect, useRef } from 'react'\nimport type { MutableRefObject } from 'react'\n\nexport const usePressedKey = (key: string): MutableRefObject<boolean> => {\n  const multipleSelect = useRef(false)\n\n  useEffect(() => {\n    const handleOn = (ev: KeyboardEvent) => {\n      if (ev.key !== key) return\n      multipleSelect.current = true\n    }\n\n    const handleOff = (ev: KeyboardEvent) => {\n      if (ev.key !== key) return\n      multipleSelect.current = false\n    }\n    addEventListener('keydown', handleOn)\n    addEventListener('keyup', handleOff)\n    return () => {\n      removeEventListener('keydown', handleOn)\n      removeEventListener('keyup', handleOff)\n    }\n  }, [key])\n  return multipleSelect\n}\n","import {\n  EditSvg,\n  Editing,\n  TranslatePathHandler,\n  ResizePathHandler,\n} from '@svg-drawing/core'\nimport { useCallback, useMemo, useEffect } from 'react'\nimport { usePressedKey } from './usePressedKey'\nimport { useRenderInterval } from './useRenderInterval'\nimport type { UseEdit, EditSvgAction, EditProps } from '../types'\n\n/**\n * ### Basic usage.\n *\n * ```ts\n * import { useEdit, Svg, EditPaths } from '@svg-drawing/react'\n * import type { EditSvgObject } from '@svg-drawing/core'\n *\n * const EditExample = ({ sharedSvg }) => {\n *   const [{ paths, ...svgProps }, onChangeSvg] = useState(\n *     sharedSvg.toJson()\n *   )\n *   const [editSvgObject, onChangeEdit] = useState<EditSvgObject | null>(\n *     null\n *   )\n *\n *   const { editProps, cancelSelect } = useEdit({\n *     svg: sharedSvg,\n *     editSvgObject,\n *     onChangeEdit,\n *     onChangeSvg,\n *   })\n *\n *   return (\n *     <div\n *       style={{\n *         border: '1px solid #333',\n *         width: 500,\n *         height: 500,\n *         touchAction: 'none',\n *         boxSizing: 'border-box',\n *       }}\n *     >\n *       <Svg {...svgProps} onSelectSvg={cancelSelect}>\n *         <EditPaths paths={paths} {...editProps} />\n *       </Svg>\n *     </div>\n *   )\n * }\n * ```\n */\nexport const useEdit: UseEdit = ({\n  multipleSelectBindKey = 'Shift',\n  editSvgObject,\n  svg,\n  onChangeEdit,\n  onChangeSvg,\n}) => {\n  const editSvg = useMemo(() => new EditSvg(svg), [svg])\n\n  const render = useRenderInterval()\n\n  const update = useCallback(() => {\n    render(() => {\n      onChangeEdit(editSvg.toJson())\n      onChangeSvg(editSvg.svg.toJson())\n    })\n  }, [editSvg, onChangeEdit, onChangeSvg, render])\n\n  const edit = useMemo(\n    () =>\n      new Editing(editSvg, (eSvg: EditSvg) => {\n        render(() => {\n          onChangeEdit(eSvg.toJson())\n          onChangeSvg(eSvg.svg.toJson())\n        })\n      }),\n    [editSvg, onChangeEdit, onChangeSvg, render]\n  )\n\n  const translatePathHandler = useMemo(\n    () => new TranslatePathHandler(edit),\n    [edit]\n  )\n  useEffect(() => () => translatePathHandler.end(), [translatePathHandler])\n\n  const resizePathHandler = useMemo(() => new ResizePathHandler(edit), [edit])\n  useEffect(() => () => resizePathHandler.end(), [resizePathHandler])\n\n  const multipleSelect = usePressedKey(multipleSelectBindKey)\n\n  const selectPaths = useCallback<EditSvgAction['selectPaths']>(\n    (sel) => edit.select(sel, multipleSelect.current),\n    [edit, multipleSelect]\n  )\n\n  const changeAttributes = useCallback<EditSvgAction['changeAttributes']>(\n    (arg) => {\n      edit.changeAttributes(arg)\n    },\n    [edit]\n  )\n\n  const cancelSelect = useCallback<EditSvgAction['cancelSelect']>(() => {\n    edit.cancel()\n  }, [edit])\n\n  const deletePaths = useCallback<EditSvgAction['deletePaths']>(() => {\n    edit.deletePaths()\n  }, [edit])\n\n  const translate = useCallback<EditSvgAction['translate']>(\n    (po) => {\n      edit.translate(po)\n    },\n    [edit]\n  )\n\n  const onTranslateStart = useCallback<EditProps['onTranslateStart']>(\n    (po) => {\n      translatePathHandler.start(po)\n    },\n    [translatePathHandler]\n  )\n\n  const onResizeStart = useCallback<EditProps['onResizeStart']>(\n    (base) => {\n      resizePathHandler.start(base)\n    },\n    [resizePathHandler]\n  )\n\n  const keyboardMap = useMemo<EditSvgAction['keyboardMap']>(\n    () => ({\n      ['Escape']: cancelSelect,\n      ['ArrowRight']: () => translate({ x: 0.5, y: 0 }),\n      ['ArrowLeft']: () => translate({ x: -0.5, y: 0 }),\n      ['ArrowUp']: () => translate({ x: 0, y: -0.5 }),\n      ['ArrowDown']: () => translate({ x: 0, y: 0.5 }),\n      ['Backspace']: deletePaths,\n    }),\n    [cancelSelect, deletePaths, translate]\n  )\n\n  const { editPaths, boundingBox } = useMemo(\n    () => ({\n      editPaths: editSvgObject?.paths ?? null,\n      boundingBox: editSvgObject?.boundingBox ?? null,\n    }),\n    [editSvgObject]\n  )\n\n  return {\n    edit,\n    keyboardMap,\n    update,\n    selectPaths,\n    cancelSelect,\n    changeAttributes,\n    translate,\n    deletePaths,\n    editProps: {\n      editPaths,\n      boundingBox,\n      onTranslateStart,\n      onResizeStart,\n      onSelectPaths: selectPaths,\n    },\n  }\n}\n","import { Svg } from '@svg-drawing/core'\nimport { useMemo } from 'react'\nimport type { UseSvg } from '../types'\n\nexport const useSvg: UseSvg = (defaultSvgOption) =>\n  useMemo(\n    () => new Svg({ width: 0, height: 0, ...(defaultSvgOption || {}) }),\n    [] // eslint-disable-line\n  )\n","import { useEffect } from 'react'\nimport type { KeyboardMap } from '../types'\n\nexport const useKeyboardBind = (keyboardMap: KeyboardMap = {}) => {\n  useEffect(() => {\n    const handleKeyboardEvent = (ev: KeyboardEvent) => {\n      const fn = keyboardMap[ev.key]\n      if (typeof fn !== 'function') return\n      ev.preventDefault()\n      fn()\n    }\n    addEventListener('keydown', handleKeyboardEvent)\n    return () => {\n      removeEventListener('keydown', handleKeyboardEvent)\n    }\n  }, [keyboardMap])\n}\n","import { parseSVGString } from '@svg-drawing/core'\nimport { ImgLoader, ImgTrace, Palette } from '@svg-drawing/img-trace'\nimport { useCallback } from 'react'\nimport type { UseParseFile } from '../types'\n\n/**\n * ### Load svg from uploaded file.\n *\n * ```ts\n * import { useSvg, useParseFile } from '@svg-drawing/react'\n *\n * const svg = useSvg({ width: 500, height: 500 })\n * const parseFile = useParseFile({ svg })\n *\n * const onChangeFile = useCallback<ChangeEventHandler<HTMLInputElement>>(\n *   async (e) => {\n *     if (!e.target?.files) return\n *     await parseFile(e.target.files[0])\n *   },\n *   []\n * )\n *\n * return <input type=\"file\" onChange={onChangeFile} />\n * ```\n */\nexport const useParseFile: UseParseFile = ({ svg }) =>\n  useCallback(\n    async (file): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader()\n\n        reader.onerror = (err) => reject(err)\n\n        reader.onload = async (ev: ProgressEvent<FileReader>) => {\n          if (!ev.target || typeof ev.target.result !== 'string') return\n          const [type, data] = ev.target.result.split(',')\n          if (type === 'data:image/svg+xml;base64') {\n            const svgXml = atob(data)\n            svg.copy(parseSVGString(svgXml))\n            resolve()\n          }\n          const imgData = (await new ImgLoader({ corsenabled: true }).fromUrl(\n            ev.target.result\n          )) as ImageData\n          const trace = new ImgTrace({\n            palettes: Palette.imageData(imgData),\n          }).load(imgData)\n          svg.copy(trace)\n          resolve()\n        }\n        reader.readAsDataURL(file)\n      })\n    },\n    [svg]\n  )\n","import { Animation } from '@svg-drawing/core'\nimport { useCallback, useMemo } from 'react'\nimport type { UseAnimation } from '../types'\n\nexport const useAnimation: UseAnimation = ({ onChangeAnimation }) => {\n  const instance = useMemo<ReturnType<UseAnimation>['instance']>(\n    () => new Animation(),\n    []\n  )\n\n  const setup = useCallback<ReturnType<UseAnimation>['setup']>(\n    (frame, opts) => {\n      instance.setup(frame, opts)\n    },\n    [instance]\n  )\n\n  const update = useCallback<ReturnType<UseAnimation>['update']>(\n    (paths) => {\n      instance.initialize(paths)\n      onChangeAnimation(instance.toJson())\n    },\n    [instance, onChangeAnimation]\n  )\n\n  const clear = useCallback<ReturnType<UseAnimation>['clear']>(() => {\n    onChangeAnimation(null)\n  }, [onChangeAnimation])\n\n  return {\n    instance,\n    setup,\n    update,\n    clear,\n  }\n}\n","import { ResizeHandler } from '@svg-drawing/core'\nimport { useEffect, useMemo } from 'react'\nimport type { UseResize } from '../types'\n\nexport const useResize: UseResize = (ref, onResize, active = true) => {\n  const resizeListener = useMemo<ResizeHandler>(() => new ResizeHandler(), [])\n\n  useEffect(() => {\n    const cleanup = () => resizeListener.off()\n\n    if (!ref.current) return cleanup\n\n    const el = ref.current\n    resizeListener.setElement(el)\n    resizeListener.setHandler(onResize)\n    if (active) resizeListener.on()\n\n    return cleanup\n  }, [onResize, resizeListener, ref, active])\n}\n"],"names":["BackgroundRect","_ref","fill","React","createElement","style","pointerEvents","width","height","Svg","onSelectSvg","background","children","rest","svgRef","useRef","onSelect","useCallback","ev","current","isSameNode","target","Object","assign","ref","onMouseDown","onTouchStart","Paths","paths","map","i","type","attributes","_ref2","key","EditPaths","editPaths","boundingBox","onTranslateStart","onResizeStart","onSelectPaths","handleMoveStartPoint","selectIndex","getPointFromEvent","handleMoveStartPath","path","EditBoundingBox","entries","_ref3","vertex","d","strokeWidth","EDIT_CONFIG","line","stroke","color","main","commandIndex","points","_ref4","default","po","k","cx","value","x","cy","y","index","r","point","selected","sub","_ref5","handleMovePathsStart","handleResizeStart","fixedType","Fragment","_ref6","touche","touches","clientX","clientY","AnimatePaths","animatePaths","animates","animAttrs","useRenderInterval","ms","updateCallback","render","update","useEffect","stopId","setInterval","clearInterval","useDraw","factory","svg","onChangeSvg","toJson","draw","useMemo","Drawing","clear","undo","pop","useDrawEventHandler","handler","active","cleanup","off","el","setElement","on","usePencilHandler","drawing","PencilHandler","usePenHandler","PenHandler","useDrawFactory","pathAttrs","curve","close","BasicDrawFactory","usePressedKey","multipleSelect","handleOn","handleOff","addEventListener","removeEventListener","useEdit","multipleSelectBindKey","editSvgObject","onChangeEdit","editSvg","EditSvg","edit","Editing","eSvg","translatePathHandler","TranslatePathHandler","end","resizePathHandler","ResizePathHandler","selectPaths","sel","select","changeAttributes","arg","cancelSelect","cancel","deletePaths","translate","start","base","keyboardMap","Escape","ArrowRight","ArrowLeft","ArrowUp","ArrowDown","Backspace","editProps","useSvg","defaultSvgOption","useKeyboardBind","handleKeyboardEvent","fn","preventDefault","useParseFile","async","Promise","resolve","reject","reader","FileReader","onerror","err","onload","result","data","split","svgXml","atob","copy","parseSVGString","imgData","ImgLoader","corsenabled","fromUrl","trace","ImgTrace","palettes","Palette","imageData","load","readAsDataURL","file","useAnimation","onChangeAnimation","instance","Animation","setup","frame","opts","initialize","useResize","onResize","resizeListener","ResizeHandler","setHandler"],"mappings":"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"}