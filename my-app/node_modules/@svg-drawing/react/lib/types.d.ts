import type { Animation, SvgObject, SvgClass, EditSvgObject, DrawFactory, ResizeCallback, DrawingClass, Editing, SelectIndex, SvgOption, PathClass, AnimationObject, PointObject, ResizeBoundingBoxBase } from '@svg-drawing/core';
import type { RefObject, HTMLAttributes } from 'react';
/** UseSvg */
export declare type UseSvg = (opts: Partial<SvgOption>) => SvgClass;
export declare type SvgProps = HTMLAttributes<SVGSVGElement> & {
    background?: SvgObject['background'];
    children?: React.ReactNode;
    onSelectSvg?: () => void;
};
export declare type PathsProps = {
    paths: SvgObject['paths'];
};
/** UseDraw */
export declare type UseDraw = (opts: UseDrawOptions) => DrawAction;
export declare type UseDrawOptions = {
    factory: DrawFactory;
    svg: SvgClass;
    onChangeSvg: (obj: SvgObject) => void;
};
export declare type DrawAction = {
    draw: DrawingClass;
    update: () => void;
    clear: () => PathClass[];
    undo: () => PathClass | undefined;
};
/** UseEdit */
export declare type UseEdit = (opts: {
    svg: SvgClass;
    editSvgObject: EditSvgObject | null;
    multipleSelectBindKey?: string;
    onChangeEdit: (arg: EditSvgObject | null) => void;
    onChangeSvg: (obj: SvgObject) => void;
}) => EditSvgAction;
export declare type EditSvgAction = {
    edit: Editing;
    keyboardMap: KeyboardMap;
    update: () => void;
    deletePaths: () => void;
    translate: Editing['translate'];
    changeAttributes: Editing['changeAttributes'];
    selectPaths: (sel: SelectIndex) => void;
    cancelSelect: () => void;
    editProps: EditProps;
};
export declare type EditProps = {
    editPaths: EditSvgObject['paths'] | null;
    boundingBox: EditSvgObject['boundingBox'] | null;
    onResizeStart: (base: ResizeBoundingBoxBase) => void;
    onTranslateStart: (po: PointObject) => void;
    onSelectPaths: (sel: SelectIndex) => void;
};
export declare type EditPathsProps = PathsProps & EditProps;
export declare type EditBoundingBoxProps = EditSvgObject['boundingBox'] & Pick<EditProps, 'onResizeStart' | 'onTranslateStart'>;
/** UseAnimation */
export declare type UseAnimation = (arg: {
    onChangeAnimation: (obj: AnimationObject | null) => void;
}) => {
    instance: Animation;
    update: (paths: PathClass[]) => void;
    clear: () => void;
    setup: Animation['setup'];
};
export declare type AnimatePathsProps = PathsProps & {
    animatePaths?: AnimationObject;
};
/** UseDrawEventHandler */
export declare type UseDrawEventHandler<E extends HTMLElement = HTMLElement> = (ref: RefObject<E>, drawing: DrawingClass, active?: boolean) => void;
/** UseResize */
export declare type UseResize<T extends HTMLElement = HTMLElement> = (ref: RefObject<T>, onResize: ResizeCallback, active?: boolean) => void;
export declare type KeyboardMap = {
    [key: string]: (() => void) | undefined;
};
export declare type UseParseFile = (opts: {
    svg: SvgClass;
}) => (file: File) => Promise<void>;
