import type { UseDrawEventHandler } from '../types';
import type { DrawEventHandler } from '@svg-drawing/core';
import type { RefObject } from 'react';
/**
 * @example <caption>useDrawEventHandler</caption>
 *
 * ```ts
 * const ref = useRef(null)
 * const handler = useSetupHandler(setup, drawing)
 *
 * UseDrawEventHandler({ ref, handler })
 * ```
 */
export declare const useDrawEventHandler: <E extends HTMLElement = HTMLElement>({ ref, handler, active, }: {
    ref: RefObject<E>;
    handler: DrawEventHandler;
    active?: boolean | undefined;
}) => void;
/**
 * @example
 *
 * ```ts
 * import { usePencilHandler } from '@svg-drawing/react'
 *
 * const draw = useDraw({...}) const ref = uesRef<HTMLElement>(null)
 *
 * usePencilHandler(ref, draw)
 * ```
 *
 * @example <caption>Switch active status</caption>
 *
 * ```ts
 * import { usePencilHandler } from '@svg-drawing/react'
 *
 * const draw = useDraw(opts) const ref = uesRef<HTMLElement>(null)
 * const [active, setActive] = useState(true)
 *
 * usePencilHandler(ref, draw, active)
 * ```
 */
export declare const usePencilHandler: UseDrawEventHandler;
/**
 * @example
 *
 * ```ts
 * import { usePenHandler } from '@svg-drawing/react'
 *
 * const draw = useDraw({...}) const ref = uesRef<HTMLElement>(null)
 *
 * usePenHandler(ref, draw)
 * ```
 *
 * @example <caption>Switch active status</caption>
 *
 * ```ts
 * import { usePenHandler } from '@svg-drawing/react'
 *
 * const draw = useDraw(opts)
 * const ref = useRef(null)
 * const [active, setActive] = useState(true)
 *
 * usePenHandler(ref, draw, active)
 * ```
 */
export declare const usePenHandler: UseDrawEventHandler;
