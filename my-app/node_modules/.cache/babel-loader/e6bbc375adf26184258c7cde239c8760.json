{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport EventListener from './EventDispatcher';\nimport { noop, currentScrollTop, transformArguments, windowHeight, windowIsUndefined } from './util';\nvar ScrollElement = function (_React$Component) {\n  _inherits(ScrollElement, _React$Component);\n  _createClass(ScrollElement, null, [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(props, _ref) {\n      var prevProps = _ref.prevProps,\n        $self = _ref.$self;\n      var nextState = {\n        prevProps: props\n      };\n      if (prevProps && props !== prevProps) {\n        $self.scrollEventListener();\n      }\n      return nextState; // eslint-disable-line\n    }\n  }]);\n\n  function ScrollElement(props) {\n    _classCallCheck(this, ScrollElement);\n    var _this = _possibleConstructorReturn(this, (ScrollElement.__proto__ || Object.getPrototypeOf(ScrollElement)).call(this, props));\n    _this.getParam = function (e) {\n      _this.clientHeight = _this.target ? _this.target.clientHeight : windowHeight();\n      var scrollTop = _this.target ? _this.target.scrollTop : currentScrollTop();\n      var domRect = _this.dom.getBoundingClientRect();\n      var targetTop = _this.target ? _this.target.getBoundingClientRect().top : 0;\n      var offsetTop = domRect.top + scrollTop - targetTop;\n      _this.elementShowHeight = scrollTop - offsetTop + _this.clientHeight;\n      var playScale = transformArguments(_this.props.playScale);\n      var playScaleEnterArray = /([\\+\\-]?[0-9#\\.]+)(px|vh|%)?/.exec(String(playScale[0])); // eslint-disable-line\n      if (!playScaleEnterArray[2]) {\n        _this.playHeight = _this.clientHeight * parseFloat(playScale[0]);\n      } else if (playScaleEnterArray[2] === 'px') {\n        _this.playHeight = parseFloat(playScaleEnterArray[1]);\n      } else {\n        _this.playHeight = _this.clientHeight * parseFloat(playScaleEnterArray[1]) / 100;\n      }\n      var leaveHeight = domRect.height;\n      var playScaleLeaveArray = /([\\+\\-]?[0-9#\\.]+)(px|vh|%)?/.exec(String(playScale[1])); // eslint-disable-line\n      if (!playScaleLeaveArray[2]) {\n        _this.leavePlayHeight = leaveHeight * parseFloat(playScale[1]);\n      } else if (playScaleLeaveArray[2] === 'px') {\n        _this.leavePlayHeight = parseFloat(playScaleLeaveArray[1]);\n      } else {\n        _this.leavePlayHeight = leaveHeight * parseFloat(playScaleLeaveArray[1]) / 100;\n      }\n      var enter = _this.props.replay ? _this.elementShowHeight >= _this.playHeight && _this.elementShowHeight <= _this.clientHeight + _this.leavePlayHeight : _this.elementShowHeight >= _this.playHeight;\n      var enterOrLeave = enter ? 'enter' : 'leave';\n      var mode = _this.enter !== enter || typeof _this.enter !== 'boolean' ? enterOrLeave : null;\n      if (mode) {\n        _this.props.onChange({\n          mode: mode,\n          id: _this.props.id\n        });\n      }\n      _this.props.onScroll({\n        domEvent: e,\n        scrollTop: scrollTop,\n        showHeight: _this.elementShowHeight,\n        offsetTop: offsetTop,\n        id: _this.props.id\n      });\n      _this.enter = enter;\n    };\n    _this.addScrollEvent = function () {\n      EventListener.addEventListener(_this.eventType, _this.scrollEventListener, _this.target);\n      var scrollTop = currentScrollTop();\n      if (!scrollTop) {\n        _this.scrollEventListener();\n      }\n    };\n    _this.scrollEventListener = function (e) {\n      _this.getParam(e);\n    };\n    _this.state = {\n      $self: _this\n    };\n    return _this;\n  }\n  _createClass(ScrollElement, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (windowIsUndefined) {\n        return;\n      }\n      this.dom = ReactDOM.findDOMNode(this);\n      var date = Date.now();\n      this.target = this.props.targetId && document.getElementById(this.props.targetId);\n      var length = EventListener._listeners.scroll ? EventListener._listeners.scroll.length : 0;\n      this.eventType = 'scroll.scrollEvent' + date + length;\n      this.addScrollEvent();\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      EventListener.removeEventListener(this.eventType, this.scrollEventListener, this.target);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n        component = _props.component,\n        playScale = _props.playScale,\n        location = _props.location,\n        targetId = _props.targetId,\n        onScroll = _props.onScroll,\n        onChange = _props.onChange,\n        replay = _props.replay,\n        componentProps = _props.componentProps,\n        props = _objectWithoutProperties(_props, ['component', 'playScale', 'location', 'targetId', 'onScroll', 'onChange', 'replay', 'componentProps']);\n      return React.createElement(component, _extends({}, props, componentProps));\n    }\n  }]);\n  return ScrollElement;\n}(React.Component);\nScrollElement.propTypes = {\n  component: PropTypes.any,\n  playScale: PropTypes.any,\n  id: PropTypes.string,\n  onChange: PropTypes.func,\n  onScroll: PropTypes.func,\n  location: PropTypes.string,\n  targetId: PropTypes.string,\n  replay: PropTypes.bool,\n  componentProps: PropTypes.object\n};\nScrollElement.defaultProps = {\n  component: 'div',\n  onChange: noop,\n  onScroll: noop,\n  playScale: 0.5,\n  replay: false,\n  componentProps: {}\n};\nScrollElement.isScrollElement = true;\nexport default ScrollElement;","map":null,"metadata":{},"sourceType":"module"}