{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React, { createElement } from 'react';\nimport PropTypes from 'prop-types';\nimport EventListener from './EventDispatcher';\nimport ScrollElement from './ScrollElement';\nimport { toArrayChildren, noop, windowIsUndefined } from './util';\nvar ScrollOverPack = function (_ScrollElement) {\n  _inherits(ScrollOverPack, _ScrollElement);\n  _createClass(ScrollOverPack, null, [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(props, _ref) {\n      var prevProps = _ref.prevProps;\n      var nextState = {\n        prevProps: props\n      };\n      if (prevProps && props !== prevProps) {\n        nextState.children = toArrayChildren(props.children);\n      }\n      return nextState;\n    }\n  }]);\n  function ScrollOverPack(props) {\n    _classCallCheck(this, ScrollOverPack);\n    var _this = _possibleConstructorReturn(this, (ScrollOverPack.__proto__ || Object.getPrototypeOf(ScrollOverPack)).call(this, props));\n    _this.scrollEventListener = function (e) {\n      _this.getParam(e);\n      var show = _this.state.show;\n      var _this$props = _this.props,\n        always = _this$props.always,\n        replay = _this$props.replay;\n      var isTop = _this.elementShowHeight > _this.clientHeight + _this.leavePlayHeight;\n      if (_this.enter || !replay && isTop) {\n        if (!show) {\n          _this.setState({\n            show: true\n          });\n        }\n        if (!always && _this.eventType) {\n          EventListener.removeEventListener(_this.eventType, _this.scrollEventListener, _this.target);\n        }\n      } else if (always) {\n        var bottomLeave = _this.elementShowHeight < _this.playHeight;\n        // 设置往上时的出场点...\n        var topLeave = replay ? isTop : null;\n        if (topLeave || bottomLeave) {\n          if (show) {\n            _this.setState({\n              show: false\n            });\n          }\n        }\n      }\n    };\n    _this.children = toArrayChildren(props.children);\n    _this.oneEnter = false;\n    _this.enter = false;\n    _this.state = {\n      show: false,\n      children: toArrayChildren(props.children)\n    };\n    return _this;\n  }\n  _createClass(ScrollOverPack, [{\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      var _this2 = this;\n      if (prevProps !== this.props) {\n        var always = this.props.always;\n        var show = this.state.show;\n        var inListener = EventListener._listeners.scroll && EventListener._listeners.scroll.some(function (c) {\n          return c.n === _this2.eventType.split('.')[1];\n        });\n        if (always && !inListener) {\n          this.addScrollEvent();\n        } else if (!always && !show) {\n          this.scrollEventListener();\n        }\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n        playScale = _props.playScale,\n        replay = _props.replay,\n        component = _props.component,\n        always = _props.always,\n        scrollEvent = _props.scrollEvent,\n        appear = _props.appear,\n        location = _props.location,\n        targetId = _props.targetId,\n        onChange = _props.onChange,\n        onScroll = _props.onScroll,\n        componentProps = _props.componentProps,\n        props = _objectWithoutProperties(_props, ['playScale', 'replay', 'component', 'always', 'scrollEvent', 'appear', 'location', 'targetId', 'onChange', 'onScroll', 'componentProps']);\n      if (windowIsUndefined) {\n        return createElement(component, _extends({}, props, componentProps), props.children);\n      }\n      var childToRender = void 0;\n      if (!this.oneEnter) {\n        var show = !appear;\n        var children = toArrayChildren(props.children).map(function (item) {\n          if (!item) {\n            return null;\n          }\n          var key = item.key || (Date.now() + Math.random()).toString(16).replace('.', '');\n          return item.type.isTweenOne ? React.cloneElement(item, _extends({}, item.props, {\n            key: key,\n            paused: !show\n          })) : React.cloneElement(item, _extends({}, item.props, {\n            key: key\n          }), show && item.props.children);\n        });\n        childToRender = createElement(component, _extends({}, props, componentProps), children);\n        this.oneEnter = true;\n      } else {\n        if (!this.state.show) {\n          this.children = this.children.map(function (item) {\n            if (!item) {\n              return null;\n            }\n            var key = item.key || (Date.now() + Math.random()).toString(16).replace('.', '');\n            // 判断 TweenOne;\n            if (item.type.isTweenOne) {\n              return React.cloneElement(item, {\n                key: key,\n                reverse: true\n              });\n            }\n            return React.cloneElement(item, {\n              key: key\n            }, null);\n          });\n        } else {\n          this.children = this.state.children;\n        }\n        childToRender = createElement(component, _extends({}, props, componentProps), this.children);\n      }\n      return childToRender;\n    }\n  }]);\n  return ScrollOverPack;\n}(ScrollElement);\nScrollOverPack.propTypes = {\n  component: PropTypes.any,\n  playScale: PropTypes.any,\n  always: PropTypes.bool,\n  scrollEvent: PropTypes.func,\n  children: PropTypes.any,\n  className: PropTypes.string,\n  style: PropTypes.any,\n  replay: PropTypes.bool,\n  onChange: PropTypes.func,\n  onScroll: PropTypes.func,\n  appear: PropTypes.bool,\n  componentProps: PropTypes.object\n};\nScrollOverPack.defaultProps = {\n  component: 'div',\n  playScale: 0.5,\n  always: true,\n  scrollEvent: noop,\n  replay: false,\n  onChange: noop,\n  onScroll: noop,\n  appear: true,\n  componentProps: {}\n};\nScrollOverPack.isScrollOverPack = true;\nexport default ScrollOverPack;","map":null,"metadata":{},"sourceType":"module"}